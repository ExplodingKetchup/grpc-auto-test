name: "grpc-auto-test"

services:
  java-client:
    build:
      context: .
      dockerfile: ./java/java-client/Dockerfile
    container_name: java-client-container
    volumes:
      - ./log:/app/log
      - ./test-cases/client:/app/test-cases/client
      - ./out/client:/app/out/client
    ports:
      - "8080:8080"
    networks:
      - grpc-network
  java-server:
    build:
      context: .
      dockerfile: ./java/java-server/Dockerfile
    container_name: java-server-container
    volumes:
      - ./log:/app/log
      - ./test-cases/server:/app/test-cases/server
      - ./out/server:/app/out/server
    ports:
      - "50051:50051"
    networks:
      - grpc-network
  node-client:
    build:
      context: .
      dockerfile: ./nodejs/Dockerfile.client
    container_name: node-client-container
    volumes:
      - ./log:/app/log
      - ./test-cases/client:/app/test-cases
      - ./out/client:/app/out/client
    ports:
      - "8080:8080"
    networks:
      - grpc-network
  node-server:
    build:
      context: .
      dockerfile: ./nodejs/Dockerfile.server
    container_name: node-server-container
    volumes:
      - ./log:/app/log
      - ./test-cases/server:/app/test-cases
      - ./out/server:/app/out/server
    ports:
      - "50051:50051"
    networks:
      - grpc-network
  py-client:
    build:
      context: .
      dockerfile: ./python/Dockerfile.client
    container_name: py-client-container
    volumes:
      - ./log:/app/log
      - ./test-cases/client:/app/test-cases/client
      - ./out/client:/app/out/client
    ports:
      - "8080:8080"
    networks:
      - grpc-network
  py-server:
    build:
      context: .
      dockerfile: ./python/Dockerfile.server
    container_name: py-server-container
    volumes:
      - ./log:/app/log
      - ./test-cases/server:/app/test-cases/server
      - ./out/server:/app/out/server
    ports:
      - "50051:50051"
    networks:
      - grpc-network


networks:
  grpc-network:
    driver: bridge